// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// Consume is an autogenerated mock type for the Consume type
type Consume struct {
	mock.Mock
}

// Consume provides a mock function with given fields: event
func (_m *Consume) Consume(event string) <-chan string {
	ret := _m.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for Consume")
	}

	var r0 <-chan string
	if rf, ok := ret.Get(0).(func(string) <-chan string); ok {
		r0 = rf(event)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan string)
		}
	}

	return r0
}

// NewConsume creates a new instance of Consume. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewConsume(t interface {
	mock.TestingT
	Cleanup(func())
}) *Consume {
	mock := &Consume{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
